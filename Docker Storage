Docker storage drivers and file systems:

File Systems:
When we install docker, it creates a folder: /var/lib/docker and it has multiple folders under it such as aufs, containers,
volumes, images etc.

Layered Architrcture:

Dockerfile1 

FROM Ubuntu                               
RUN apt-get update python                 
RUN pip install flask flask-mysql         
COPY. /opt/slurce-code                    
ENTRYPOINT FLASK_APP =  /opt/slurce-code  

docker build Dockerfile1 -t 
 |
 |- Layer1: Base Ubuntu Layer      : 120MB
 |
 |- Layer2: Changes in apt packages: 306 MB
 |
 |- Layer3: Changes in pip packages: 6.3 MB
 |
 |- Layer4: Source code            : 226KB
 |
 |- Layer5: update Entrypoint      : 0 KB



To understand the advantages of Architrcture layer let's see the another application:

Dockerfile2

FROM Ubuntu                               
RUN apt-get update python                 
RUN pip install flask flask-mysql         
COPY. /opt/slurce-code                    
ENTRYPOINT FLASK_APP =  /opt/slurce-code

docker build Dockerfile1 -t
 |
 |- Layer1: Base Ubuntu Layer      : 0B
 |
 |- Layer2: Changes in apt packages: 0B
 |
 |- Layer3: Changes in pip packages: 0B
 |
 |- Layer4: Source code            : 229B
 |
 |- Layer5: update Entrypoint      : 0 KB

 As docker uses the same firat three layers from previous application, it will not build the first three layers but it builds only last two layers which 
 are different from the first application. In this way docker can save the disk space by reusing the previous layers 
 and updating the latest source code for the application.


 COPY-ON-WRITE Mechanism:

                       -----------------------------------------
                       |            Read/write                 |
  Container Layer      |                                       |
                       | app.py                       temp.txt |
                       |                                       |                                      
                        ----------------------------------------


                       -----------------------------------------
                       |            Read only                  |
Image Layer            |                                       |
                       | app.py                       temp.txt |
                       |                                       |                                      
                        ---------------------------------------- 
If we want to modify the file inside the container for the already build image, than a copy of the original file will be 
created which has the read/write permission and we can modify in that instead of original image file.


How to persist those data of the imagess we duild before it gets destroyed?
volumes:

To persist a data we can add persistant volume to the container.
To do this first we need to create a volume using docker volume create command.
   When we run the "docker volume create command data_volume" it creates a folder call data_volume under the
    /var/lib/docker under that volume directory.
   Than when we run the docker container using the docker run command we xould mount this volume inside the docker container
   read write layer using the -v option : docker run -v data_volume:/var/lib/mysql mysql

   This will create a new container and mount the data_volume we created into /var/lib/mysql folder inside the container


   Docker has 2 mounts: volume mount & bind mount.

   volume mount mounts a volume from the volume directory and bind mounts mounts a directory from any location on the docker 
   host.     

   -v is the old format, we can use the latest one which is --mount: docker run \ -- mount type:binf; source:data/mysql
   target:  /var/lib/mysql mysql.

   Some of the common storage drivers are:
   1. AUFS
   2. ZFS
   3. BTRFS
   4. Device Mapper
   5. Overlay
   6. Overlay2
  