 
 Voting-app Image:
https://github.com/dockersamples/example-voting-app/blob/master/architecture.png


https://github.com/dockersamples/example-voting-app.git

git clone for the above has to be done inorder to make the demo voting-app from the github repository.

Now we need to build the docker image for those three:  

app.py  Dockerfile  dotnet  requirements.txt  static  templates
[redhat1@localhost vote]$ cat Dockerfile
# Using official python runtime base image
FROM python:2.7-alpine

# Set the application directory
WORKDIR /app

# Install our requirements.txt
ADD requirements.txt /app/requirements.txt
RUN pip install -r requirements.txt

# Copy our code from the current folder to /app inside the container
ADD . /app

# Make port 80 available for links and/or publish
EXPOSE 80

# Define our command to be run when launching the container
CMD ["gunicorn", "app:app", "-b", "0.0.0.0:80", "--log-file", "-", "--access-logfile", "-", "--workers", "4", "--keep-alive", "0"]



Now we will duild the docker image by running the docker buils image and we will tag it with the name voting-app.
ex: docker build . -t voting-app

Just check by typing docker images we can see the voting-app image running.

Now we can run a container by running the container: docker run -p 5000:80 voting-app and -p is used to publish the output of the container 
my mapping hte container to port 5000:80.

Now run the mapped container in browser by mapping with the ip address of your host with port 5000, ex: 198******:5000
it should give you the output for cat and dog.

Now,first run an instance of redis in dettached mode: docker run -d -name:redis redis.
By now you must have the instance of redis running in dettached mode.


Now we can run an instance of voting-app.
Add a link to the redis server: docker run -p 5000:80 --link redis:redis voting-app

Now the voting should be successful as the container is successful to establish a connection to redis.

Now we will run the instance of db: docker run -d --name=db postgres:11.4(version can be an issue here as the container exits 
right after the creation of it).


Now go to worker directory and buils the worker image for worker:
docker build . -t worker-app.

We will runn the instance of a worker-app but it needs two links, one for redis and the other for postgres:
docker run --link redis:redis --link db:db worker-app

Now we to build the resul-app known as resulting app.
Build a result-app: docker build . -t result-app

Finally, we can now run the result-app: dockwr run -p 5001(port the result-app to 5001 as 5000 is already occupied)
and link to db(--link bd:bd) result-app: docker run -p 5001 --link db:db result-app.
