Docker Engine is an open source containerization technology for building and containerizing your applications.
 Docker Engine acts as a client-server application with: A server with a long-running daemon process dockerd .
 APIs which specify interfaces that programs can use to talk to and instruct the Docker daemon.


It can be simply refered to a host docker installed on it.

When we install docker on a host we are actually installing three different components:
1. Docker Daemon
2. REST API Server
3. Docker client

1: Docker Daemon: It is a background processes that manages docker objects such as, docker images, containers, 
   volumes and networks.

2: REST API Server: It ia an API interface that programs can used to interact to deamon and provide instructions.
   Own tools can also be created using it.

3: Docker CLI: It's nothing but command line interface. 


CONTAINERIZATION:
Docker uses namespace to isolate work space.

process ID                         Unix
          \                      Timesharing
           \                     /
            \                   /
             \                 /
              \               /
               \             /
                  Namespace    
                /     |     \
               /      |      \
              /       |       \
             /        |        \
            /         |         \
           /          |          \
Networks              |           Mount
                      |       
                Interprocess

Namespace -PID

Container sharing same resources:
cgroups: Docker uses cgroup(control groups) to restrict the amount of hardware resources allocated to each container. 

                            Linux System

Docker Container               Docker Container                Docker Container




    CPU                                       Memory


docker run --cpus=.5 ubuntu: it can restrict the containers to take up only 50% of the host resources.
docker run --memory=100m ubuntu: limits the amount of memory used to to 100mb.


Docker PID Namespaces Demo:

Namespaces PID:
-----------------------------------------------------------------------
|                                                                     |
|                          Linux System                               |
| PID:1                  ____________________________________         |
|  |-- PID:2            |                                    |        |
|  |-- PID:3            |     Child System(Container)        |        |
|  |-- PID:4            |                                    |        |
|  |-- PID:5 ------------------- PID:1                       |        |
|  |-- PID:6----------------------|- PID:2                   |        | 
|                       |                                    |        |
|                       |                                    |        |
|                       |____________________________________|        |
|                                                                     |      
|---------------------------------------------------------------------|

Now pull the tomcat docker image for the demo:
docker run -it --rm -p 8888:8080 tomcat:9.0


than we need to run on the port :8888 if the container is accessible or not.

now go inside the container: docker exec (docker container ID) ps -eaf.(ps -eaf lists all the processes running in the container)
you can see now the tomcat is running and it will have a process ID of 1.

Now run ps -eaf | grep and some contents from that runned process above, it should run the same sentance but will have different PID.

In this way we can make to run different processe under root process making docker host think it's a root process but it's just 
anther process.