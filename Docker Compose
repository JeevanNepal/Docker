Docker Compose:
Docker compose is a tool for defining & running multi-container docker applications.

1. Install docker compose.
If whether it is installed or not check with docker-compose --version.

STEP 1. link to install docker compose: 1. https://github.com/docker/compose/releases
                                        2. using PIP: pin install -U docker-compose
STEP 2. Create a docker compose files at any location on the system and the name of the file should be docker-compose.yml.
 Edit the file using Vi editor: type vi docker-compose.yml.
 In the edit section write the below: This is just a sample voting application.
Services:

webapp:
        image: nginx


database:
         image: redis

STEP 3.Check the validity of the file by command: docker-compose config.
Step 4.  

Yaml:

YAML is a human-readable data-serialization language. It is commonly used for configuration files and in applications
 where data is being stored or transmitted. YAML targets many of the same communications 
applications as Extensible Markup Language but has a minimal syntax which intentionally differs from SGML.


We will run the following for runing the application:

> first of all run the docker run command: docker run -d --name=redis redis.
> next we will deploy the postgres sql db by running the docker run postgres command: docker run -d --name=db postgres 9.4
> next run the front end app and run the instance of a voting app by running the instance of voting-app: docker run -d --name=vote -p 5000:80 --link redis:redis voting-app.
> next we will deploy the result web application that showa the results to the user: docker run -d --name=result -p 5001:80 --link db:db result-app
  result-app.
> finally we deploy hte worker by running hte instance of the worker image: docker run -d --name=worker --link redis:redis --link db:db worker.
> link is a commend line option which can be used to link two containers.

Simple steps to add the components for voting app.
redis:
     image: redis

db:
    image: postgres 9.4

vote:
    image: voting-app
    ports:
        - 5000:80
    links:
        - redis
result:
      image: result-app
      ports:
        - 5001:80
      links:
        - db

worker:
      image: worker
      links:
        - redis
        - db
we can specify for links in this format as well: db:db = db



Docker compose build:

redis:
     image: redis

db:
    image: postgres 9.4

vote:
    build: ./voting
    ports:
        - 5000:80
    links:
        - redis
result:
      build: ./result
      ports:
        - 5001:80
      links:
        - db

worker:
      build: ./ worker
      links:
        - redis
        - db


Docker compose-versions:

Version 1:                 
    redis:                      
      image: redis

    database:
      image: postgres 9.4

    vote:
      image: voting-app
      ports: 
         -5000:80
      links:   
          db:db = db

    result:
      image: result    




Version 2:
    version:2
    services:
          redis:                      
            image: redis

          database:
            image: postgres 9.4

          vote:
            image: voting-app
            ports: 
              -5000:80
            depends_on:
              db:db = db 
          
          result:
            image: result



Version 3:
    version:3
    services:
        redis:                      
          image: redis

        database:
            image: postgres 9.4

        vote:
            image: voting-app
            ports: 
              -5000:80
        
        result:
           image: result

NETWORK IN DOCKER COMPOSE:


           

        




